functions-framework==3.*
google-cloud-bigquery==3.11.0
google-cloud-storage==2.9.0
PyYAML==6.0





import functions_framework

import logging
import os
import traceback
import re
import pandas as pd
import pyarrow.parquet as pq
from google.cloud import bigquery
from google.cloud import storage
import yaml

with open("./schemas.yaml") as schema_file:
    config = yaml.load(schema_file, Loader=yaml.Loader)

PROJECT_ID = os.getenv('onyx-park-409513')
BQ_DATASET = 'finalsprint'
CS = storage.Client()
BQ = bigquery.Client()
job_config = bigquery.LoadJobConfig()

def streaming(data):
     bucketname = data['bucket']
     filename = data['name']
     timeCreated = data['timeCreated']
     
     try:
          uri = 'gs://%s/%s' % (data['bucket'], data['name'])
          if re.search('creado', filename):
               df_user = filtrarPorColumnaYGroupBy(uri,['Id_User', 'User'], ['Id_User'])
               df_state = filtrarPorColumnaYGroupBy(uri,['Id_State', 'State'], ['Id_State'])
               df_city = filtrarPorColumnaYGroupBy(uri,['Id_City', 'City', 'Id_State'], ['Id_City', 'Id_State'])
               df_category = filtrarPorColumnaYGroupBy(uri,['Id_Category', 'Category'], ['Id_Category'])
               df_business = filtrarPorColumnaYGroupBy(uri,['Id_Business', 'Business', 'Id_Category', 'Id_City', 'Longitude', 'Latitude', 'Avg_ratings'], ['Id_Business'])
               df_reviews = filtrarPorColumnaYGroupBy(uri,['Id_Review','Id_Business', 'Id_User', 'Sentiment', 'Month', 'Year'], ['Id_Review'])
               
               for tableNombre in config:
                    tableName = tableNombre.get('name')
                    tableSchema = tableNombre.get('schema')
                    _check_if_table_exists(tableName, tableSchema)
                    tableFormat = tableNombre.get('format')
                    if tableFormat == 'PARQUET':
                         if(tableName == 'users'):
                              _load_table_from_uri_gen(df_user, data['name'], tableSchema, tableName)
                         if(tableName == 'state'):
                              _load_table_from_uri_gen(df_state, data['name'], tableSchema, tableName)
                         if(tableName == 'city'):
                              _load_table_from_uri_gen(df_city, data['name'], tableSchema, tableName)
                         if(tableName == 'category'):
                              _load_table_from_uri_gen(df_category, data['name'], tableSchema, tableName)
                         if(tableName == 'business'):
                              _load_table_from_uri_gen(df_business, data['name'], tableSchema, tableName)
                         if(tableName == 'reviews'):
                              _load_table_from_uri_gen(df_reviews, data['name'], tableSchema, tableName)
                         
     
          for table in config:
               tableName = table.get('name')
               
               
               if re.search(tableName.replace('_', '-'), filename) or re.search(tableName, filename):
                    tableSchema = table.get('schema')
                    _check_if_table_exists(tableName, tableSchema)
                    tableFormat = table.get('format')
                    if tableFormat == 'PARQUET':
                         _load_table_from_uri(data['bucket'], data['name'], tableSchema, tableName)
     except Exception:
          print('Error streaming file. Cause: %s' % (traceback.format_exc()))


def filtrarPorColumnaYGroupBy(archivo, columnasFiltrar, columnasGroupBy):
     df = pd.read_parquet(archivo, engine='pyarrow')
     grouped_df = df.groupby(columnasGroupBy, as_index=False)[columnasFiltrar].first()
     return grouped_df



          
def _check_if_table_exists(tableName, tableSchema):
    table_id = BQ.dataset(BQ_DATASET).table(tableName)
    try:
        BQ.get_table(table_id)
    except Exception:
        logging.warn('Creating table: %s' % (tableName))
        schema = create_schema_from_yaml(tableSchema)
        table = bigquery.Table(table_id, schema=schema)
        table = BQ.create_table(table)
        print("Created table {}.{}.{}".format(table.project, table.dataset_id, table.table_id))
        
        
def _load_table_from_uri_gen(bucket_n, file_name, tableSchema, tableName):
    table_id = BQ.dataset(BQ_DATASET).table(tableName)
    schema = create_schema_from_yaml(tableSchema)
    job_config.schema = schema

    


    # Cargar DataFrame a BigQuery
    job_config.source_format = bigquery.SourceFormat.PARQUET
    job_config.write_disposition = 'WRITE_APPEND'
    load_job = BQ.load_table_from_dataframe(
        bucket_n,
        table_id,
        job_config=job_config,
    )
    load_job.result()
    print("Job finished.")

def _load_table_from_uri(bucket_name, file_name, tableSchema, tableName):
    uri = 'gs://%s/%s' % (bucket_name, file_name)
    table_id = BQ.dataset(BQ_DATASET).table(tableName)
    schema = create_schema_from_yaml(tableSchema)
    job_config.schema = schema

    # Cargar datos desde Parquet a DataFrame
    df = pd.read_parquet(uri, engine='pyarrow')
    


    # Cargar DataFrame a BigQuery
    job_config.source_format = bigquery.SourceFormat.PARQUET
    job_config.write_disposition = 'WRITE_APPEND'
    load_job = BQ.load_table_from_dataframe(
        df,
        table_id,
        job_config=job_config,
    )

    load_job.result()
    print("Job finished.")

def create_schema_from_yaml(table_schema):
    schema = []
    for column in table_schema:
        schemaField = bigquery.SchemaField(column['name'], column['type'], column['mode'])
        schema.append(schemaField)

        if column['type'] == 'RECORD':
            schemaField.fields = create_schema_from_yaml(column['fields'])
    return schema


# Triggered by a change in a storage bucket
@functions_framework.cloud_event
def hello_gcs(cloud_event):
    data = cloud_event.data

    event_id = cloud_event["id"]
    event_type = cloud_event["type"]

    bucket = data["bucket"]
    name = data["name"]
    metageneration = data["metageneration"]
    timeCreated = data["timeCreated"]
    updated = data["updated"]

    print(f"Event ID: {event_id}")
    print(f"Event type: {event_type}")
    print(f"Bucket: {bucket}")
    print(f"File: {name}")
    print(f"Metageneration: {metageneration}")
    print(f"Created: {timeCreated}")
    print(f"Updated: {updated}")
    streaming(data)


functions-framework==3.*
google-cloud-bigquery==3.11.0
google-cloud-storage==2.9.0
PyYAML==6.0
pandas
pyarrow